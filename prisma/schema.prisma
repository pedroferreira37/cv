generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "accounts_user_id_fkey")
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "sessions_user_id_fkey")
  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  resumes       Resume[]
  sessions      Session[]

  @@map("users")
}

model Resume {
  id          String       @id @default(uuid())
  template    String
  name        String
  userId      String
  educations  Education[]
  experiences Experience[]
  profile     Profile?
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "resume_userId_fkey")
  @@map("resume")
}

model Profile {
  id       String  @id @default(uuid())
  name     String?
  role     String?
  mail     String?
  github   String?
  linkedin String?
  about    String? @db.Text
  resumeId String  @unique
  Resume   Resume  @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@map("profile")
}

model Education {
  id          String  @id @default(uuid())
  degree      String?
  institution String?
  start_year  String?
  start_month String?
  end_year    String?
  end_month   String?
  current     Boolean
  resumeId    String
  Resume      Resume  @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@index([resumeId], map: "educations_resumeId_fkey")
  @@map("educations")
}

model Experience {
  id          String  @id @default(uuid())
  role        String?
  company     String?
  start_year  String?
  start_month String?
  end_year    String?
  end_month   String?
  description String? @db.Text
  current     Boolean
  resumeId    String
  Resume      Resume  @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@index([resumeId], map: "experiences_resumeId_fkey")
  @@map("experiences")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
